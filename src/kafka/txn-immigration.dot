digraph immigration {
  node[shape=box;];
  newrank=true;
  rankdir=LR;

  subgraph cluster_ReplicaManager {
    graph[label="ReplicaManager";fontsize=20;style=rounded];
    getLog;
  };

  subgraph cluster_TransactionMetadata {
    graph[label="TransactionMetadata";fontsize=20;style=rounded];
    TransactionMetadata[
      fillcolor="#95e1d3";
      style=filled;
      shape="record";
      label="{{
        TransactionMetadata|
        transactionalId: String \l|
        producerId: long \l|
        lastProducerId: Long \l|
        producerEpoch: short \l|
        txnTimeoutMs: Int \l|
        state: TransactionState \l|
        topicPartitions: mutable.Set[TopicPartition]\l
      }}";
    ];
    
  };

  subgraph cluster_TransactionStateManager {
    graph[label="TransactionStateManager";fontsize=20;style=rounded];
    transactionMetadataCache[
      fillcolor="#95e1d3";
      style=filled;
      shape="box3d";
      label="transactionMetadataCache"
    ];
    transactionMetadataCache[
      fillcolor="#95e1d3";
      style=filled;
      shape="record";
      label="{{
        transactionMetadataCache|
        <entry>mutable.Map[Int, TxnMetadataCacheEntry]\l
        parition 到cacheEntry的映射
      }}";
    ];
    TxnMetadataCacheEntry[
      shape="record";
      fillcolor="#95e1d3";
      style=filled;
      label="{{
        TxnMetadataCacheEntry|
        coordinatorEpoch Int \l|
        <meta> metadataPerTransactionalId \l 
        Pool[String, TransactionMetadata]\l
        事务ID到事务metadata映射
      }}";
    ];
    loadTransactionsForTxnTopicPartition[
      shape="record";
      label="{{
        loadTransactionsForTxnTopicPartition|
        从tp 日志恢复事务metadata内存中
      }}";
    ];
    transactionMetadataCache:entry -> TxnMetadataCacheEntry;
    TxnMetadataCacheEntry:meta -> TransactionMetadata;

    loadTransactionsForTxnTopicPartition-> {
      addLoadedTransactionsToCache
      getLog;
    }
    addLoadedTransactionsToCache -> transactionMetadataCache;
  }

  subgraph cluster_TranscationCoordinator {
    graph[label="TranscationCoordinator";fontsize=20;style=rounded];
    handleTxnImmigration -> loadTransactionsForTxnTopicPartition;
  };
  subgraph cluster_KafkaApi {
    graph[label="KafkaApi";fontsize=20;style=rounded];
    handleLeaderAndIsrRequest -> handleTxnImmigration;
  };
}
