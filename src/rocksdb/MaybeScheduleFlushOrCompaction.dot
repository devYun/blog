digraph MaybeScheduleFlushOrCompaction {
  node[shape=box];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;
  MaybeScheduleFlushOrCompaction[shape="record";
    label="{{
      MaybeScheduleFlushOrCompaction|
      调度刷新和压缩线程\l
      最大线程数为GetBGJobLimits\l
    }}";
  ];
  MaybeScheduleFlushOrCompaction -> {
    GetBGJobLimits;
    GetBackgroundThreads;
    Schedule;
  }
  Schedule[shape="record";
    label="{{
      Schedule|
      后台线程池调度
    }}";
  ];
  BGThread[shape="record";
    label="{{
      BGThread|
      后台工作线程
    }}";
  ];
  Schedule -> BGThread[style=dashed;color=gray70];

  BGThread -> {
    BGWorkFlush;
    BGWorkCompaction;
  }[style=dashed;color=gray50];

  BGWorkFlush -> {
    BackgroundCallFlush;
  }

  BackgroundCallFlush -> {
    BackgroundFlush;
    bg_cv__SignalAll;
    SleepForMicroseconds;
    ReleaseFileNumberFromPendingOutputs;
    FindObsoleteFiles;
    FlushBufferToLog;
    MaybeScheduleFlushOrCompaction;
    atomic_flush_install_cv__SignalAll;
    PurgeObsoleteFiles;
  }

  BackgroundFlush[shape="record";
    label="{{
      BackgroundFlush|
      将memTable\l 
      刷到磁盘上\l
    }}";
  ];
  BackgroundCompaction[shape="record";
    label="{{
      BackgroundCompaction|
      压缩\l
    }}";
  ];


  BGWorkCompaction -> {
    BackgroundCallCompaction;
  }
  BackgroundCallCompaction -> {
    WaitForIngestFile;
    BackgroundCompaction;
    FindObsoleteFiles;
    ReleaseFileNumberFromPendingOutputs;
    MaybeScheduleFlushOrCompaction;
    bg_cv__SignalAll;
  }

}
