digraph check_key_conflict {
  node[shape=box];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;
  subgraph cluster_MemTable {
    graph[label="MemTable";fontsize=20;];
    GetEarliestSequenceNumber ->  earliest_seqno_
    earliest_seqno_[
      shape="record";
      fillcolor="#95e1d3"
      style=filled;
      label="{{
        earliest_seqno_|
          std::atomic\<SequenceNumber\>\l earliest_seqno_;
      }}";
    ];
    MemTable_Get;
  } // end of MemTable

  subgraph cluster_TransactionBaseImpl {
    graph[label=" TransactionBaseImpl";fontsize=20;];
    tracked_keys_[
      shape="record";
      fillcolor="#95e1d3"
      style=filled;
      label="{{
        tracked_keys_|
          TransactionKeyMap tracked_keys_;\l
      }}";
    ];
    tracked_keys_ -> TransactionKeyMap -> TransactionKeyMapInfo;
    TransactionKeyMap[
      shape="record";
      fillcolor="#95e1d3"
      style=filled;
      label="{{
        TransactionKeyMap|
          using TransactionKeyMap =\l
          std::unordered_map\<uint32_t,\l
          std::unordered_map\<std::string\l, TransactionKeyMapInfo\>\>\l;
      }}";
    ];
    TransactionKeyMapInfo[
      shape="record";
      label="{{
        TransactionKeyMapInfo|
          <seq> SequenceNumber seq;\l|
          uint32_t num_writes;\l|
          uint32_t num_reads;\l|
          bool exclusive;\l
      }}";
    ];
    
  } // end of  TransactionBaseImpl

  subgraph cluster_DBImpl {
    graph[label="DBImpl";fontsize=20;];
    GetAndRefSuperVersion;
    GetEarliestMemTableSequenceNumber;
    ReturnAndCleanupSuperVersion;
    GetLatestSequenceForKey;
    SuperVersion[
      shape="record";
      fillcolor="#95e1d3"
      style=filled;
      label="{{
        SuperVersion|
          ColumnFamilyData* cfd;\l|
          MemTable* mem;\l|
          MemTableListVersion* imm;\l|
          Version* current;\l|
          MutableCFOptions mutable_cf_options;\l|
          uint64_t version_number;\l|
          WriteStallCondition write_stall_condition;\l|
          InstrumentedMutex* db_mutex;\l
      }}";
    ];
    GetAndRefSuperVersion -> SuperVersion;
    GetEarliestMemTableSequenceNumber -> GetEarliestSequenceNumber;

    GetLatestSequenceForKey -> {
      LastSequence;
      LookupKey;
      MemTable_Get;
      GetEarliestSequenceNumber;
    }
  }
  subgraph cluster_TransactionUtil {
    graph[label="TransactionUtil";fontsize=20;];
    CheckKeyForConflicts -> {
      GetAndRefSuperVersion;
      GetEarliestMemTableSequenceNumber;
      CheckKey;
      ReturnAndCleanupSuperVersion;
    };
    TransactionKeyMapInfo:seq -> CheckKey[style=dashed];
    CheckKey -> {
      GetLatestSequenceForKey;
    }
    SuperVersion ->CheckKey[style=dashed];
  }
}
