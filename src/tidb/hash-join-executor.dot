digraph hash_join_executor {
  node[shape=box];
  newrank=true;
  rankdir=TD;

  //channels;
  joinResultCh[
    fillcolor="#95e1d3"
    style=filled;
    shape=box3d;
    label="joinResultCh *hashjoinWorkerResult"
  ];
  buildSideResultCh[
    fillcolor="#95e1d3"
    style=filled;
    shape=box3d;
    label="buildSideResultCh"
  ];
  probeResultChs[
    fillcolor="#95e1d3"
    style=filled;
    shape=box3d;
    label="probeResultChs"
  ];
  joinChkResourceCh[
    fillcolor="#95e1d3"
    style=filled;
    shape=box3d;
    label="joinChkResourceCh[workerID]"
  ];

  //goroutines
  fetchAndBuildHashTable[
    fillcolor="#f38181";
    style=filled;
    shape=doubleoctagon;
    label="fetchAndBuildHashTable\l读取Inner表数据并构建hash表"
  ];
  fetchBuildSideRows[
    fillcolor="#f38181";
    style=filled;
    shape=doubleoctagon;
    label="fetchBuildSideRows"
  ];
  fetchProbeSideChunks[
    fillcolor="#f38181";
    style=filled;
    shape=doubleoctagon;
    label="fetchProbeSideChunks"
  ];
  runJoinWorker[
    fillcolor="#f38181";
    style=filled;
    shape=doubleoctagon;
    label="runJoinWorker[WorkerID]"
  ];
  waitJoinWorkersAndCloseResultChan[
    fillcolor="#f38181";
    style=filled;
    shape=doubleoctagon;
    label="waitJoinWorkersAndCloseResultChan"
  ];

  subgraph cluster_HashJoinExec {
    graph[label="HashJoinExec";fontsize=20;];
    HashJoinExec_Next[label="Next"]
  };

  subgraph cluster_joiner {
    graph[label="joiner";fontsize=20;];
    tryToMatchOuters;
    tryToMatchInners;
    onMissMatch;
  }

  subgraph cluster_hashRowContainer {
    graph[label="hashRowContainer";fontsize=20;];
    rowContainer;
    GetMatchedRowsAndPtrs -> matchJoinKey -> EqualChunkRow;
  }

  subgraph cluster_datasource {
    graph[label="datasource";fontsize=20;style=filled;fillcolor="#eaffd0"];
    {
      buildSideExec_Next;
      probeSideExec_Next;
    } -> distSQL -> tikv;
  }

  HashJoinExec_Next -> {
    fetchAndBuildHashTable;
    fetchAndProbeHashTable;
  }
  // 使用inner构建hash表
  fetchAndBuildHashTable -> {
    fetchBuildSideRows;
    buildHashTableForList;
  };
  fetchBuildSideRows -> {
    buildSideResultCh;
    buildSideExec_Next;
  }

  buildSideResultCh -> buildHashTableForList[label="取数据"];
  buildHashTableForList -> rowContainer;

  fetchAndProbeHashTable -> {
    runJoinWorker;
    fetchProbeSideChunks;
    waitJoinWorkersAndCloseResultChan;
  };

  fetchProbeSideChunks -> {
    probeSideExec_Next;
    probeResultChs;
  };

  probeResultChs -> runJoinWorker;

  runJoinWorker -> {
    joinResultCh;
    joinChkResourceCh;
    getNewJoinResult;
    join2Chunk;
    join2ChunkForOuterHashJoin;
  }
  joinResultCh -> HashJoinExec_Next;
  joinChkResourceCh -> getNewJoinResult;

  join2Chunk -> {
    joinMatchedProbeSideRow2Chunk;
    HashChunkSelected;
    VectorizedFilter;
  };

  joinMatchedProbeSideRow2Chunk -> {
    tryToMatchInners;
    onMissMatch;
    GetMatchedRowsAndPtrs;
  };

  join2ChunkForOuterHashJoin -> {
    joinMatchedProbeSideRow2ChunkForOuterHashJoin;
    HashChunkColumns;
  };

  joinMatchedProbeSideRow2ChunkForOuterHashJoin -> {
    tryToMatchOuters;
    GetMatchedRowsAndPtrs;
  };

  waitJoinWorkersAndCloseResultChan -> {
    handleUnmatchedRowsFromHashTableInDisk;
    handleUnmatchedRowsFromHashTableInMemory;
  } -> getNewJoinResult;

}
