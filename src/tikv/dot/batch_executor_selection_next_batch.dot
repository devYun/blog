#include "styles.h"
digraph next_batch {
  node[shape=box;style="rounded";color="#1c2123";fontcolor="#2f3638"];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;

  next_batch -> {
    BatchExecutor_next_batch;
    handle_src_result;
  }
  handle_src_result[style_func;label="{{
    handle_src_result|
    遍历conditions,调用\l 
    每个conditions.eval\l
  }}"]
  update_logical_rows_by_vector_value -> {
    logical_rows_retain;
  }
  logical_rows_retain[style_func;label="{{
    logical_rows.retain|
    只保留condition计算为true的rows
  }}"]
  eval -> {
    update_logical_rows_by_scalar_value;
    update_logical_rows_by_vector_value
  }[style_edge_data];

  handle_src_result -> {
    eval;
    update_logical_rows_by_scalar_value;
    update_logical_rows_by_vector_value;
    match_template_evaluable;
  }
  update_logical_rows_by_scalar_value[style_func;label="{{
    update_logical_rows_by_scalar_value|
    如果eval result为false\l
    清空result\l
  }}"]
  BatchExecutor_next_batch -> BatchExecuteResult -> handle_src_result[style_edge_data];

  subgraph cluster_RpnExpressionNode {
    graph[label="RpnExpressionNode";fontsize=20;style="rounded,dashed";color="slategrey"]
        Constant;
        FnCall;
        ColumnRef;
  }
      

  subgraph cluster_RpnExpression {
    graph[label="RpnExpression";fontsize=20;style="rounded,dashed";color="slategrey"]

     eval -> {
        ensure_columns_decoded;
        eval_decoded;
     }
     eval_decoded -> {
        Constant;
        FnCall;
        ColumnRef;
     }
  }
}
