#include "styles.h"
digraph reaft_client_resolve {
  node[shape=box;style="rounded";color="#1c2123";fontcolor="#2f3638"];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;

  subgraph cluster_PdClient {
    graph[label="PdClient";fontsize=20;style="rounded,dashed";color="slategrey"]
    get_store;
  }
  subgraph cluster_PeerFsmDelegate {
    graph[label="PeerFsmDelegate";fontsize=20;style="rounded,dashed";color="slategrey"]
    on_significant_msg -> {
      global_replication_state;
      assign_commit_groups;
    };
  }

  subgraph cluster_RaftStoreRouter {
    graph[label="RaftStoreRouter";fontsize=20;style="rounded,dashed";color="slategrey"]

    //>router.rs:87 fn report_resolved(&self, store_id: u64, group_id: u64) {#F/opt/github/tikv/components/raftstore/src/router.rs#L87
    report_resolved[style_func;label="{{
      report_resolved|
      Report a StoreResolved event\l
      to all raft groups\l
    }}"]
    report_resolved -> {
      broadcast_normal;
    }
    broadcast_normal[style_func;label="{{
      broadcast_normal|
      SignificantMsg::StoreResolved\l
    }}"]
    broadcast_normal -> on_significant_msg[style_edge_data];
  }

  subgraph cluster_resolver {
    graph[label="resolver.rs/Runner";fontsize=20;style="rounded,dashed";color="slategrey"]
    //>resolve.rs:52 struct Runner<T, RR>#F/opt/github/tikv/src/server/resolve.rs#L52
    Runner[style_func;label="{{
      Runner|
      pd_client: Arc\<T\>,\l|
      <store_addrs> store_addrs: HashMap\<u64, StoreAddr\>,\l|
      state: Arc\<Mutex\<GlobalReplicationState\>\>,\l|
      router: RR,\l
    }}"]
    resolve[style_func;label="{{
      resolve|
      先从store_addrs本地cache中取addr\l
      失败的调用get_address去pd server\l
      获取addr地址，然后保存到cache中\l
    }}"]

    start  -> start_impl -> run -> resolve;
    start -> {
      unbounded;
    }
    unbounded -> {rx;tx};
    rx -> start_impl[style_edge_data];
    unbounded[style_func;label="{{
      unbounded|
      创建unbounded channel \l
      tx放入Scheduler\l
      rx 传给start_impl\l
    }}"]
    start_impl[style_func;label="{{
      start_impl|
      spawn线程\l
      在线程while循环中\l
      从rx中获取task\l
      然后调用run 执行task.cb
    }}"]
    run -> task_cb;
    task_cb[style_func;label="{{
      task_cb|
      解析完毕后调用\l 
      task的回调\l
    }}"]

    resolve -> {
      get_address;
      store_addrs_get;
      store_addrs_insert;
    }
    {store_addrs_get;store_addrs_insert;} -> Runner:store_addrs[style_edge_data];

    get_address -> {
      get_store;
      state_status_get_mode;
      register_store;
      take_peer_address;
      report_resolved;
      group_id
    }
    get_store -> {
      take_peer_address;
      register_store
    }[style_edge_data];
    take_peer_address[style_func;label="{{
      take_peer_address|
      返回peer addr
    }}"]

    take_peer_address -> store_addrs_insert[style_edge_data];
    resolve -> task_cb;
  }

  subgraph cluster_PdStoreResolver {
    graph[label="PdStoreResolver";fontsize=20;style="rounded,dashed";color="slategrey"]
    PdStoreAddrResolver[style_func;label="{{
      PdStoreAddrResolver|
      sched: Scheduler\<Task\>\l|
      使用tx发消息给runner\l
    }}"]
    PdStoreAddrResolver -> tx;
    PdStoreAddrResolver_resolve -> tx;
    PdStoreAddrResolver_resolve[style_func;label="{{
      resolve|
      将Task\{store_id, cb\}发送给tx\l
    }}"]
  }
  subgraph cluster_StreamBackEnd {
    graph[label="StreamBackEnd";fontsize=20;style="rounded,dashed";color="slategrey"]
    StreamBackEnd_resolve -> PdStoreAddrResolver_resolve;
    StreamBackEnd_resolve[style_func;label="{{
      resolve
    }}"]
    task_cb -> oneshot_channel;
    oneshot_channel[style_func;label="{{
      oneshot::channel|
      回调中使用\l 
      oneshot::channel的tx\l
      触发rx.await\l
    }}"]
      
  }


}
