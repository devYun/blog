#include "styles.h"
digraph send_raft_message {
  node[shape=box;style="rounded";color="#1c2123";fontcolor="#2f3638"];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;
  subgraph cluster_RaftClient {
    graph[label="RaftClient";fontsize=20;style="rounded,dashed";color="slategrey"]
    send;
    flush;
    need_flush;
  }

  subgraph cluster_ServerTransport {
    graph[label="ServerTransport";fontsize=20;style="rounded,dashed";color="slategrey"]
      //>transport.rs:45 fn send(&mut self, msg: RaftMessage) -> RaftStoreResult<()> {#F/opt/github/tikv/src/server/transport.rs#L45
    ServerTransport_send -> send;
    ServerTransport_send[style_func;label="{{
      send
    }}"]
    //>transport.rs:56 fn flush(&mut self) {#F/opt/github/tikv/src/server/transport.rs#L56
    ServerTransport_flush -> flush;
    ServerTransport_flush[style_func;label="{{
      flush
    }}"]
    //>transport.rs:52 fn need_flush(&self) -> bool {#F/opt/github/tikv/src/server/transport.rs#L52
    ServerTransport_need_flush -> need_flush;
    ServerTransport_need_flush[style_func;label="{{
      need_flush
    }}"]
  }

  subgraph cluster_Peer {
    graph[label="Peer";fontsize=20;style="rounded,dashed";color="slategrey"]

    subgraph cluster_raft {
      graph[label="raft";fontsize=20;style="rounded,dashed";color="slategrey"]
      ready;
      //>raw_node.rs:614 pub fn advance_append(&mut self, rd: Ready) -> LightReady {#F/Users/yu.xie/.cargo/git/checkouts/raft-rs-42b8049ef2e3af07/91a60ce/src/raw_node.rs#L614
      advance_append[style_func;label="{{
        advance_append|
        raft_group.advance_append()\l
        获取light ready\l
      }}"]
    //>raw_node.rs:418 pub fn ready(&mut self) -> Ready {#F/Users/yu.xie/.cargo/git/checkouts/raft-rs-42b8049ef2e3af07/91a60ce/src/raw_node.rs#L418
      ready[style_func;label="{{
        ready|
        raft_group.ready()\l
        获取raft要发送的messages\l
      }}"]
    }
    {advance_append;ready} -> Peer_send[style_edge_data];

    //>peer.rs:1037 fn send<T, I>(&mut self, trans: &mut T, msgs: I, metrics: &mut RaftSendMessageMetrics)#F/opt/github/tikv/components/raftstore/src/store/peer.rs#L1037
    Peer_send -> send_raft_message;

    //>peer.rs:1893 pub fn handle_raft_ready_advance<T: Transport>(#F/opt/github/tikv/components/raftstore/src/store/peer.rs#L1893
    handle_raft_ready_advance -> {
      Peer_send;
      advance_append;
    }

    //>peer.rs:1585 pub fn handle_raft_ready_append<T: Transport>(#F/opt/github/tikv/components/raftstore/src/store/peer.rs#L1585
    handle_raft_ready_append -> {
      //>peer.rs:1728 self.send(&mut ctx.trans, vec_msg, &mut ctx.raft_metrics.send_message);#F/opt/github/tikv/components/raftstore/src/store/peer.rs#L1728
      Peer_send;
      ready;
    }
    Peer_send[style_func;label="{{
      send|
        遍历messages\l 
        发送每一条消息\l
    }}"]
    send_raft_message[style_func;label="{{
      send_raft_message|
      给messag加上自己的\l 
      region_id, epoch\l
      设置peer等\l
    }}"]
    send_raft_message -> ServerTransport_send;
    send_extra_message -> ServerTransport_send;
    /*
    send_wake_up_message -> send_extra_message;
    bcast_wake_up_message -> send_wake_up_message;
    on_tick -> on_check_peer_stale_state_tick -> bcast_check_stale_peer_message -> send_extra_message;
    start -> on_check_merge -> send_want_rollback_merge -> send_extra_message;
    */
  }

  subgraph cluster_PeerFsmDelegate {
    graph[label="PeerFsmDelegate";fontsize=20;style="rounded,dashed";color="slategrey"]
    //>peer.rs:926 pub fn post_raft_ready_append(&mut self, ready: CollectedReady) {#F/opt/github/tikv/components/raftstore/src/store/fsm/peer.rs#L926
    post_raft_ready_append -> handle_raft_ready_advance;
    collect_ready -> handle_raft_ready_append;
  }
  

  subgraph cluster_RaftPoller {
    graph[label="RaftPoller";fontsize=20;style="rounded,dashed";color="slategrey"]
    end -> handle_raft_ready -> {
       ServerTransport_need_flush;
       ServerTransport_flush;
       //>store.rs:674 .post_raft_ready_append(ready);#F/opt/github/tikv/components/raftstore/src/store/fsm/store.rs#L674
       post_raft_ready_append;
    }
    pause -> {
       ServerTransport_need_flush;
       ServerTransport_flush;
    }
    handle_normal -> {
      collect_ready;
    }
  }

  subgraph cluster_Poller {
    graph[label="Poller";fontsize=20;style="rounded,dashed";color="slategrey"]
    //>batch.rs:270 fn poll(&mut self) {#F/opt/github/tikv/components/batch-system/src/batch.rs#L270
    poller_poll[style_func;label="{{
      poll|
      BatchSystem Poller主循环fetch fsm\l|
      然后在调用RaftPoller\l 
      处理有消息的的fsm\l
    }}"]
    poller_poll -> {
      handle_normal;
      end;
      pause;
    }
  }
  
}
